// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by  version  DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	TestMdw1() echo.MiddlewareFunc
	TestMdw2() echo.MiddlewareFunc

	// Returns all pets
	// (GET /pets)
	FindPets(ctx echo.Context, params FindPetsParams) error
	// Creates a new pet
	// (POST /pets)
	AddPet(ctx echo.Context) error
	// Deletes a pet by ID
	// (DELETE /pets/{id})
	DeletePet(ctx echo.Context, id int64) error
	// Returns a pet by ID
	// (GET /pets/{id})
	FindPetByID(ctx echo.Context, id int64) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindPets converts echo context to params.
func (w *ServerInterfaceWrapper) FindPets(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsParams
	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPets(ctx, params)
	return err
}

// AddPet converts echo context to params.
func (w *ServerInterfaceWrapper) AddPet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddPet(ctx)
	return err
}

// DeletePet converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeletePet(ctx, id)
	return err
}

// FindPetByID converts echo context to params.
func (w *ServerInterfaceWrapper) FindPetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FindPetByID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/pets", wrapper.FindPets, wrapper.Handler.TestMdw1(), wrapper.Handler.TestMdw2())
	router.POST(baseURL+"/pets", wrapper.AddPet, wrapper.Handler.TestMdw1(), wrapper.Handler.TestMdw2())
	router.DELETE(baseURL+"/pets/:id", wrapper.DeletePet)
	router.GET(baseURL+"/pets/:id", wrapper.FindPetByID, wrapper.Handler.TestMdw1())

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

